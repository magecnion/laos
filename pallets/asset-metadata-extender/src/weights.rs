
//! Autogenerated weights for `pallet_asset_metadata_extender`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-06-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `trujideb`, CPU: `12th Gen Intel(R) Core(TM) i5-12500H`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/laos
// benchmark
// pallet
// --steps=50
// --repeat=20
// --pallet=pallet-asset-metadata-extender
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/asset-metadata-extender/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_asset_metadata_extender`.
pub trait WeightInfo {
	fn precompile_extend(t: u32, u: u32, ) -> Weight;
	fn precompile_update(t: u32, u: u32, ) -> Weight;
	fn precompile_balance_of(u: u32, ) -> Weight;
	fn precompile_claimer_by_index(u: u32, ) -> Weight;
	fn precompile_extension_by_index(u: u32, ) -> Weight;
	fn precompile_extension_by_location_and_claimer(u: u32, ) -> Weight;
	fn precompile_has_extension_by_claimer(u: u32, ) -> Weight;
	fn create_token_uri_extension(t: u32, u: u32, ) -> Weight;
	fn update_token_uri_extension(t: u32, u: u32, ) -> Weight;
}

/// Weights for `pallet_asset_metadata_extender` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extend(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 14_342_000 picoseconds.
		Weight::from_parts(14_913_488, 4545)
			// Standard Error: 142
			.saturating_add(Weight::from_parts(1_640, 0).saturating_mul(t.into()))
			// Standard Error: 142
			.saturating_add(Weight::from_parts(11_145, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_update(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 12_488_000 picoseconds.
		Weight::from_parts(13_133_449, 4545)
			// Standard Error: 203
			.saturating_add(Weight::from_parts(2_245, 0).saturating_mul(t.into()))
			// Standard Error: 203
			.saturating_add(Weight::from_parts(9_157, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_balance_of(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3999`
		// Minimum execution time: 1_880_000 picoseconds.
		Weight::from_parts(2_363_738, 3999)
			// Standard Error: 32
			.saturating_add(Weight::from_parts(1_717, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_claimer_by_index(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167 + u * (2 ±0)`
		//  Estimated: `4035`
		// Minimum execution time: 6_615_000 picoseconds.
		Weight::from_parts(8_006_471, 4035)
			// Standard Error: 106
			.saturating_add(Weight::from_parts(12_637, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_index(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314 + u * (3 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 9_259_000 picoseconds.
		Weight::from_parts(10_983_746, 4545)
			// Standard Error: 125
			.saturating_add(Weight::from_parts(17_835, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_location_and_claimer(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 5_125_000 picoseconds.
		Weight::from_parts(5_659_157, 4545)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(5_366, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_has_extension_by_claimer(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 2_196_000 picoseconds.
		Weight::from_parts(2_716_093, 4545)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(1_931, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn create_token_uri_extension(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 11_559_000 picoseconds.
		Weight::from_parts(11_813_080, 4545)
			// Standard Error: 104
			.saturating_add(Weight::from_parts(785, 0).saturating_mul(t.into()))
			// Standard Error: 104
			.saturating_add(Weight::from_parts(8_299, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn update_token_uri_extension(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 9_660_000 picoseconds.
		Weight::from_parts(10_284_669, 4545)
			// Standard Error: 87
			.saturating_add(Weight::from_parts(601, 0).saturating_mul(t.into()))
			// Standard Error: 87
			.saturating_add(Weight::from_parts(6_725, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extend(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 14_342_000 picoseconds.
		Weight::from_parts(14_913_488, 4545)
			// Standard Error: 142
			.saturating_add(Weight::from_parts(1_640, 0).saturating_mul(t.into()))
			// Standard Error: 142
			.saturating_add(Weight::from_parts(11_145, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn precompile_update(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 12_488_000 picoseconds.
		Weight::from_parts(13_133_449, 4545)
			// Standard Error: 203
			.saturating_add(Weight::from_parts(2_245, 0).saturating_mul(t.into()))
			// Standard Error: 203
			.saturating_add(Weight::from_parts(9_157, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_balance_of(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3999`
		// Minimum execution time: 1_880_000 picoseconds.
		Weight::from_parts(2_363_738, 3999)
			// Standard Error: 32
			.saturating_add(Weight::from_parts(1_717, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_claimer_by_index(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `167 + u * (2 ±0)`
		//  Estimated: `4035`
		// Minimum execution time: 6_615_000 picoseconds.
		Weight::from_parts(8_006_471, 4035)
			// Standard Error: 106
			.saturating_add(Weight::from_parts(12_637, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_index(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314 + u * (3 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 9_259_000 picoseconds.
		Weight::from_parts(10_983_746, 4545)
			// Standard Error: 125
			.saturating_add(Weight::from_parts(17_835, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_extension_by_location_and_claimer(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `259 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 5_125_000 picoseconds.
		Weight::from_parts(5_659_157, 4545)
			// Standard Error: 54
			.saturating_add(Weight::from_parts(5_366, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:0)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[0, 512]`.
	fn precompile_has_extension_by_claimer(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 2_196_000 picoseconds.
		Weight::from_parts(2_716_093, 4545)
			// Standard Error: 34
			.saturating_add(Weight::from_parts(1_931, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ExtensionsCounter` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::ExtensionsCounter` (`max_values`: None, `max_size`: Some(534), added: 3009, mode: `MaxEncodedLen`)
	/// Storage: `AssetMetadataExtender::ClaimersByLocationAndIndex` (r:0 w:1)
	/// Proof: `AssetMetadataExtender::ClaimersByLocationAndIndex` (`max_values`: None, `max_size`: Some(570), added: 3045, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn create_token_uri_extension(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `4545`
		// Minimum execution time: 11_559_000 picoseconds.
		Weight::from_parts(11_813_080, 4545)
			// Standard Error: 104
			.saturating_add(Weight::from_parts(785, 0).saturating_mul(t.into()))
			// Standard Error: 104
			.saturating_add(Weight::from_parts(8_299, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (r:1 w:1)
	/// Proof: `AssetMetadataExtender::TokenUrisByClaimerAndLocation` (`max_values`: None, `max_size`: Some(1080), added: 3555, mode: `MaxEncodedLen`)
	/// The range of component `t` is `[0, 512]`.
	/// The range of component `u` is `[0, 512]`.
	fn update_token_uri_extension(t: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `185 + u * (1 ±0)`
		//  Estimated: `4545`
		// Minimum execution time: 9_660_000 picoseconds.
		Weight::from_parts(10_284_669, 4545)
			// Standard Error: 87
			.saturating_add(Weight::from_parts(601, 0).saturating_mul(t.into()))
			// Standard Error: 87
			.saturating_add(Weight::from_parts(6_725, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}